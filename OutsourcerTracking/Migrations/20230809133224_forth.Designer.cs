// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OutsourcerTracking.Labels.DataAccess.Concrete.EntityFramework;

#nullable disable

namespace OutsourcerTracking.Migrations
{
    [DbContext(typeof(ApplicationIdenityDbContext))]
    [Migration("20230809133224_forth")]
    partial class forth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.AlkWorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OrderGroup")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReferenceWorkOrderNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StockCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AlkWorkOrders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            OrderGroup = "2-Takımlar+CVL",
                            ReferenceWorkOrderNo = "000000000002988",
                            StockCode = "P-K23160-09",
                            StockName = "StockName 1"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            OrderGroup = "ZZZ-Yazlık Deneme",
                            ReferenceWorkOrderNo = "000000000006124",
                            StockCode = "Y23270-11",
                            StockName = "StockName 1"
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Departments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Bilgi İşlem",
                            IsDeleted = false,
                            Name = "Bilgi İşlem"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Lojistik",
                            IsDeleted = false,
                            Name = "Lojistik"
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.EmployeeUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("TitleId");

                    b.ToTable("EmployeeUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            TitleId = 2
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 2,
                            TitleId = 3
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.IntegrationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("IntegrationStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Eşit"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Eklenecek"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Güncellenecek"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Silinecek"
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("No")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Operations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Code 1",
                            IsDeleted = false,
                            Name = "Kesim Atölye",
                            No = "No 1"
                        },
                        new
                        {
                            Id = 2,
                            Code = "Code 2",
                            IsDeleted = false,
                            Name = "Pres Atölye",
                            No = "No 2"
                        },
                        new
                        {
                            Id = 3,
                            Code = "Code 3",
                            IsDeleted = false,
                            Name = "Grogren Atölye",
                            No = "No 3"
                        },
                        new
                        {
                            Id = 4,
                            Code = "Code 4",
                            IsDeleted = false,
                            Name = "Hasse Lamine Atölye",
                            No = "No 4"
                        },
                        new
                        {
                            Id = 5,
                            Code = "Code 5",
                            IsDeleted = false,
                            Name = "Eva Lamine Atölye",
                            No = "No 5"
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Outsource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MachineCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MachineNo")
                        .HasColumnType("int");

                    b.Property<string>("OutsourcePhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarehouseCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Outsources", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Address",
                            CurrentCode = "Cari Kod 1",
                            Email = "ornek@ornek.com",
                            IsDeleted = false,
                            MachineCode = "0042-003",
                            MachineName = "Güney Triko",
                            MachineNo = 37,
                            Phone = "1123456789",
                            WarehouseCode = "Depo Kod 1"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Address",
                            CurrentCode = "Cari Kod 2",
                            Email = "ornek@ornek.com",
                            IsDeleted = false,
                            MachineCode = "0044-005",
                            MachineName = "Miraç - Elişi",
                            MachineNo = 38,
                            Phone = "1123456789",
                            WarehouseCode = "Depo Kod 2"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Address",
                            CurrentCode = "Cari Kod 3",
                            Email = "ornek@ornek.com",
                            IsDeleted = false,
                            MachineCode = "0042-004",
                            MachineName = "Erdal Karakuş",
                            MachineNo = 39,
                            Phone = "1123456789",
                            WarehouseCode = "Depo Kod 3"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Address",
                            CurrentCode = "Cari Kod 4",
                            Email = "ornek@ornek.com",
                            IsDeleted = false,
                            MachineCode = "0042-006",
                            MachineName = "Taner Örme",
                            MachineNo = 40,
                            Phone = "1123456789",
                            WarehouseCode = "Depo Kod 4"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Address",
                            CurrentCode = "Cari Kod 5",
                            Email = "ornek@ornek.com",
                            IsDeleted = false,
                            MachineCode = "0042-007",
                            MachineName = "Onur Triko - Zaza",
                            MachineNo = 41,
                            Phone = "1123456789",
                            WarehouseCode = "Depo Kod 5"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Address",
                            CurrentCode = "Cari Kod 6",
                            Email = "ornek@ornek.com",
                            IsDeleted = false,
                            MachineCode = "0042-008",
                            MachineName = "Fatih Yavuz",
                            MachineNo = 42,
                            Phone = "1123456789",
                            WarehouseCode = "Depo Kod 6"
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.OutsourcesOutsourceUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OutsourceId")
                        .HasColumnType("int");

                    b.Property<int>("OutsourceUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OutsourceId");

                    b.HasIndex("OutsourceUserId");

                    b.ToTable("OutsourcesOutsourceUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OutsourceId = 1,
                            OutsourceUserId = 3
                        },
                        new
                        {
                            Id = 2,
                            OutsourceId = 2,
                            OutsourceUserId = 3
                        },
                        new
                        {
                            Id = 3,
                            OutsourceId = 3,
                            OutsourceUserId = 3
                        },
                        new
                        {
                            Id = 4,
                            OutsourceId = 1,
                            OutsourceUserId = 4
                        },
                        new
                        {
                            Id = 5,
                            OutsourceId = 2,
                            OutsourceUserId = 4
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.OutsourceUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OutsourceUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 3
                        },
                        new
                        {
                            Id = 4
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.OutsourceWorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AlkNormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AlkUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AlkWorkOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IntegrationStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<int>("OutsourceId")
                        .HasColumnType("int");

                    b.Property<int>("ProductWarehouseCode")
                        .HasColumnType("int");

                    b.Property<int>("RawMaterialsWarehouseCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SituationId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WorkOrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkOrderNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AlkWorkOrderId");

                    b.HasIndex("IntegrationStatusId");

                    b.HasIndex("OperationId");

                    b.HasIndex("OutsourceId");

                    b.HasIndex("SituationId");

                    b.ToTable("OutsourceWorkOrders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlkNormalizedUserName = "Orkun Demirci",
                            AlkUserName = "Or_De",
                            AlkWorkOrderId = 1,
                            Amount = 500m,
                            CreatedOn = new DateTime(2023, 8, 9, 16, 32, 24, 322, DateTimeKind.Local).AddTicks(3528),
                            Description = "Açıklama",
                            IntegrationStatusId = 1,
                            IsDeleted = false,
                            OperationId = 1,
                            OutsourceId = 1,
                            ProductWarehouseCode = 1,
                            RawMaterialsWarehouseCode = 1,
                            RecordDate = new DateTime(2023, 8, 9, 16, 32, 24, 322, DateTimeKind.Local).AddTicks(3517),
                            SituationId = 1,
                            WorkOrderDate = new DateTime(2023, 8, 9, 16, 32, 24, 322, DateTimeKind.Local).AddTicks(3527),
                            WorkOrderNo = "000000000002988"
                        },
                        new
                        {
                            Id = 2,
                            AlkNormalizedUserName = "Orkun Demirci",
                            AlkUserName = "Or_De",
                            AlkWorkOrderId = 1,
                            Amount = 700m,
                            CreatedOn = new DateTime(2023, 8, 9, 16, 32, 24, 322, DateTimeKind.Local).AddTicks(3534),
                            Description = "Açıklama",
                            IntegrationStatusId = 1,
                            IsDeleted = false,
                            OperationId = 2,
                            OutsourceId = 2,
                            ProductWarehouseCode = 1,
                            RawMaterialsWarehouseCode = 1,
                            RecordDate = new DateTime(2023, 8, 9, 16, 32, 24, 322, DateTimeKind.Local).AddTicks(3533),
                            SituationId = 1,
                            WorkOrderDate = new DateTime(2023, 8, 9, 16, 32, 24, 322, DateTimeKind.Local).AddTicks(3533),
                            WorkOrderNo = "000000000002989"
                        },
                        new
                        {
                            Id = 3,
                            AlkNormalizedUserName = "Orkun Demirci",
                            AlkUserName = "Or_De",
                            AlkWorkOrderId = 1,
                            Amount = 200m,
                            CreatedOn = new DateTime(2023, 8, 9, 16, 32, 24, 322, DateTimeKind.Local).AddTicks(3536),
                            Description = "Açıklama",
                            IntegrationStatusId = 1,
                            IsDeleted = false,
                            OperationId = 3,
                            OutsourceId = 3,
                            ProductWarehouseCode = 1,
                            RawMaterialsWarehouseCode = 1,
                            RecordDate = new DateTime(2023, 8, 9, 16, 32, 24, 322, DateTimeKind.Local).AddTicks(3535),
                            SituationId = 1,
                            WorkOrderDate = new DateTime(2023, 8, 9, 16, 32, 24, 322, DateTimeKind.Local).AddTicks(3535),
                            WorkOrderNo = "000000000002990"
                        },
                        new
                        {
                            Id = 4,
                            AlkNormalizedUserName = "Orkun Demirci",
                            AlkUserName = "Or_De",
                            AlkWorkOrderId = 2,
                            Amount = 350m,
                            CreatedOn = new DateTime(2023, 8, 9, 16, 32, 24, 322, DateTimeKind.Local).AddTicks(3538),
                            Description = "Açıklama",
                            IntegrationStatusId = 1,
                            IsDeleted = false,
                            OperationId = 4,
                            OutsourceId = 4,
                            ProductWarehouseCode = 1,
                            RawMaterialsWarehouseCode = 1,
                            RecordDate = new DateTime(2023, 8, 9, 16, 32, 24, 322, DateTimeKind.Local).AddTicks(3537),
                            SituationId = 1,
                            WorkOrderDate = new DateTime(2023, 8, 9, 16, 32, 24, 322, DateTimeKind.Local).AddTicks(3537),
                            WorkOrderNo = "000000000006124"
                        },
                        new
                        {
                            Id = 5,
                            AlkNormalizedUserName = "Orkun Demirci",
                            AlkUserName = "Or_De",
                            AlkWorkOrderId = 2,
                            Amount = 400m,
                            CreatedOn = new DateTime(2023, 8, 9, 16, 32, 24, 322, DateTimeKind.Local).AddTicks(3540),
                            Description = "Açıklama",
                            IntegrationStatusId = 1,
                            IsDeleted = false,
                            OperationId = 5,
                            OutsourceId = 5,
                            ProductWarehouseCode = 1,
                            RawMaterialsWarehouseCode = 1,
                            RecordDate = new DateTime(2023, 8, 9, 16, 32, 24, 322, DateTimeKind.Local).AddTicks(3539),
                            SituationId = 1,
                            WorkOrderDate = new DateTime(2023, 8, 9, 16, 32, 24, 322, DateTimeKind.Local).AddTicks(3539),
                            WorkOrderNo = "000000000006125"
                        },
                        new
                        {
                            Id = 6,
                            AlkNormalizedUserName = "Orkun Demirci",
                            AlkUserName = "Or_De",
                            AlkWorkOrderId = 2,
                            Amount = 200m,
                            CreatedOn = new DateTime(2023, 8, 9, 16, 32, 24, 322, DateTimeKind.Local).AddTicks(3542),
                            Description = "Açıklama",
                            IntegrationStatusId = 1,
                            IsDeleted = false,
                            OperationId = 1,
                            OutsourceId = 6,
                            ProductWarehouseCode = 1,
                            RawMaterialsWarehouseCode = 1,
                            RecordDate = new DateTime(2023, 8, 9, 16, 32, 24, 322, DateTimeKind.Local).AddTicks(3541),
                            SituationId = 1,
                            WorkOrderDate = new DateTime(2023, 8, 9, 16, 32, 24, 322, DateTimeKind.Local).AddTicks(3541),
                            WorkOrderNo = "000000000006126"
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Receive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSealed")
                        .HasColumnType("bit");

                    b.Property<int>("OutsourceWorkOrderId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeUserId");

                    b.HasIndex("OutsourceWorkOrderId");

                    b.ToTable("Receives", (string)null);
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "e9347c0b-52d0-475b-8079-328e501ecc40",
                            IsDeleted = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "94ef33c1-03ce-4e73-a058-215e92c05edf",
                            IsDeleted = false,
                            Name = "Employee User",
                            NormalizedName = "EMPLOYEE USER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "83b72677-70f3-4834-b923-b44098eaee15",
                            IsDeleted = false,
                            Name = "Outsource User",
                            NormalizedName = "OUTSOURCE USER"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "9c75cdfc-0004-4345-9c55-75eded3ad303",
                            IsDeleted = false,
                            Name = "API User",
                            NormalizedName = "API USER"
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Situation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Situations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Üretici tarafında bekleyen işler.",
                            IsDeleted = false,
                            Name = "Beklemede"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Üretimi devam eden işler.",
                            IsDeleted = false,
                            Name = "Üretimde"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Üretimi tamamlanmış işler.",
                            IsDeleted = false,
                            Name = "Tamamlandı"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Üretimi ve teslimatı tamamlanmış işler.",
                            IsDeleted = false,
                            Name = "Biten"
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsChanged")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Tables", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsChanged = false
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Titles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Yazılım Uzamanı",
                            IsDeleted = false,
                            Name = "Yazılım Uzmanı"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Yazılım Uzman Yardımcısı",
                            IsDeleted = false,
                            Name = "Yazılım Uzman Yardımcı"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Ulaştırmacı",
                            IsDeleted = false,
                            Name = "Ulaştırmacı"
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Tracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSealed")
                        .HasColumnType("bit");

                    b.Property<int>("OutsourceWorkOrderId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OutsourceWorkOrderId");

                    b.ToTable("Trackings", (string)null);
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6872cef3-2c83-414a-af36-84faee352882",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "Kullanıcı",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEL7cZKsKCuvXlx8GLeTn/oLFwOoF3K7kLQsXTyGUmVhYrGvqNfG9hCO+0h6Lqcx4Cw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb4af676-522e-4968-bf52-c84733011182",
                            TwoFactorEnabled = false,
                            UserName = "Admin Kullanıcı"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df724e89-bdcf-40f9-bb81-1e718b673797",
                            Email = "employee1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Çalışan1",
                            IsDeleted = false,
                            LastName = "Kullanıcı",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEOPnxkQqoNS3lDpjhKGlQ1N5qrVZ4VC0WxLWv4yjQp7sXssVndS6sUgpS/RSOHXaAA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b175f03-28ca-42fa-87af-d45de485c81f",
                            TwoFactorEnabled = false,
                            UserName = "Çalışan1 Kullanıcı"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3932335-0fea-4a9e-b8e2-317932aee88c",
                            Email = "fason1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Fason1",
                            IsDeleted = false,
                            LastName = "Kullanıcı",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJCvnyYdbV0bU0z5CWKhsZWsS5g+fOL3Wsn0S9Ng0CnR0n9o1HpyW5rpBGa40cS5Zg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68dab21d-fb85-4b7a-888b-8ea92ac3b5a3",
                            TwoFactorEnabled = false,
                            UserName = "Fason1 Kullanıcı"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "838c7014-6d88-4424-8a9c-4a89f3eebac2",
                            Email = "fason2@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Fason2",
                            IsDeleted = false,
                            LastName = "Kullanıcı",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEHiSdkSEgnusxb296bFMxUyF5kFK2gHlOERzoG0SivS8kmrbpNxNfZJAF7RPdheneA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44440096-d5e3-4342-baaa-30a533667c1a",
                            TwoFactorEnabled = false,
                            UserName = "Fason2 Kullanıcı"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6001fd2e-0bc6-42b6-aee9-73758f03a718",
                            Email = "employee2@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Çalışan2",
                            IsDeleted = false,
                            LastName = "Kullanıcı",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEOgL3Ziqkc1+wAhF9tZJr6xv7eGhJa/cP1iEIeZOYtU/gPUvU2Ke3Dgei318U/ZVaQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38188f34-5595-4197-a092-ebede40fb763",
                            TwoFactorEnabled = false,
                            UserName = "Çalışan2 Kullanıcı"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0fade35a-ed21-46a3-af6b-6f44938db51e",
                            Email = "server@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Server",
                            IsDeleted = false,
                            LastName = "Kullanıcı",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAECN3l9fxvKDf3FFh5L9W1NaArEp2UTGe4ZVLQxqcfGcttkJnp/r6zXRAFMxcjt5D0g==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49e08b5f-7abf-4ba7-a5bb-b716c6818610",
                            TwoFactorEnabled = false,
                            UserName = "Server Kullanıcı"
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.UsersRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            RoleId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            RoleId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            RoleId = 2,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            RoleId = 4,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.EmployeeUser", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.Department", "Department")
                        .WithMany("EmployeeUsers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.User", "User")
                        .WithOne("EmployeeUser")
                        .HasForeignKey("OutsourcerTracking.Labels.DataAccess.Entities.EmployeeUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.Title", "Title")
                        .WithMany("EmployeeUsers")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Title");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.OutsourcesOutsourceUsers", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.Outsource", "Outsource")
                        .WithMany("OutsourcesOutsourceUsers")
                        .HasForeignKey("OutsourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.OutsourceUser", "OutsourceUser")
                        .WithMany("Outsources")
                        .HasForeignKey("OutsourceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Outsource");

                    b.Navigation("OutsourceUser");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.OutsourceUser", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.User", "User")
                        .WithOne("OutsourceUser")
                        .HasForeignKey("OutsourcerTracking.Labels.DataAccess.Entities.OutsourceUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.OutsourceWorkOrder", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.AlkWorkOrder", "AlkWorkOrder")
                        .WithMany("OutsourceWorkOrders")
                        .HasForeignKey("AlkWorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.IntegrationStatus", "IntegrationStatus")
                        .WithMany("OutsourceWorkOrders")
                        .HasForeignKey("IntegrationStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.Operation", "Operation")
                        .WithMany("OutsourceWorkOrders")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.Outsource", "Outsource")
                        .WithMany("OutsourceWorkOrders")
                        .HasForeignKey("OutsourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.Situation", "Situation")
                        .WithMany("OutsourceWorkOrders")
                        .HasForeignKey("SituationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlkWorkOrder");

                    b.Navigation("IntegrationStatus");

                    b.Navigation("Operation");

                    b.Navigation("Outsource");

                    b.Navigation("Situation");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Receive", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.EmployeeUser", "EmployeeUser")
                        .WithMany("Receives")
                        .HasForeignKey("EmployeeUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.OutsourceWorkOrder", "OutsourceWorkOrder")
                        .WithMany("Receives")
                        .HasForeignKey("OutsourceWorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeUser");

                    b.Navigation("OutsourceWorkOrder");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Tracking", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.OutsourceWorkOrder", "OutsourceWorkOrder")
                        .WithMany("Trackings")
                        .HasForeignKey("OutsourceWorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OutsourceWorkOrder");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.UsersRoles", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.AlkWorkOrder", b =>
                {
                    b.Navigation("OutsourceWorkOrders");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Department", b =>
                {
                    b.Navigation("EmployeeUsers");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.EmployeeUser", b =>
                {
                    b.Navigation("Receives");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.IntegrationStatus", b =>
                {
                    b.Navigation("OutsourceWorkOrders");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Operation", b =>
                {
                    b.Navigation("OutsourceWorkOrders");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Outsource", b =>
                {
                    b.Navigation("OutsourceWorkOrders");

                    b.Navigation("OutsourcesOutsourceUsers");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.OutsourceUser", b =>
                {
                    b.Navigation("Outsources");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.OutsourceWorkOrder", b =>
                {
                    b.Navigation("Receives");

                    b.Navigation("Trackings");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Situation", b =>
                {
                    b.Navigation("OutsourceWorkOrders");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Title", b =>
                {
                    b.Navigation("EmployeeUsers");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.User", b =>
                {
                    b.Navigation("EmployeeUser")
                        .IsRequired();

                    b.Navigation("OutsourceUser")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
