// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OutsourcerTracking.Labels.DataAccess.Concrete.EntityFramework;

#nullable disable

namespace OutsourcerTracking.Migrations
{
    [DbContext(typeof(ApplicationIdenityDbContext))]
    [Migration("20230817105909_tenth")]
    partial class tenth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.AlkWorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OrderGroup")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReferenceWorkOrderNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StockCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AlkWorkOrders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            OrderGroup = "2-Takımlar+CVL",
                            ReferenceWorkOrderNo = "000000000002988",
                            StockCode = "P-K23160-09",
                            StockName = "StockName 1"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            OrderGroup = "ZZZ-Yazlık Deneme",
                            ReferenceWorkOrderNo = "000000000006124",
                            StockCode = "Y23270-11",
                            StockName = "StockName 1"
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Departments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Bilgi İşlem",
                            IsDeleted = false,
                            Name = "Bilgi İşlem"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Lojistik",
                            IsDeleted = false,
                            Name = "Lojistik"
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.EmployeeUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("TitleId");

                    b.ToTable("EmployeeUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            TitleId = 2
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 2,
                            TitleId = 3
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.IntegrationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("IntegrationStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Eşit"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Eklenecek"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Güncellenecek"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Silinecek"
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("No")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Operations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Code 1",
                            IsDeleted = false,
                            Name = "Kesim Atölye",
                            No = "No 1"
                        },
                        new
                        {
                            Id = 2,
                            Code = "Code 2",
                            IsDeleted = false,
                            Name = "Pres Atölye",
                            No = "No 2"
                        },
                        new
                        {
                            Id = 3,
                            Code = "Code 3",
                            IsDeleted = false,
                            Name = "Grogren Atölye",
                            No = "No 3"
                        },
                        new
                        {
                            Id = 4,
                            Code = "Code 4",
                            IsDeleted = false,
                            Name = "Hasse Lamine Atölye",
                            No = "No 4"
                        },
                        new
                        {
                            Id = 5,
                            Code = "Code 5",
                            IsDeleted = false,
                            Name = "Eva Lamine Atölye",
                            No = "No 5"
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Outsource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MachineCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MachineNo")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarehouseCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Outsources", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Address",
                            CurrentCode = "32000100857",
                            Email = "ornek@ornek.com",
                            IsDeleted = false,
                            MachineCode = "0042-003",
                            MachineName = "Güney Triko",
                            MachineNo = 37,
                            Phone = "1123456789",
                            WarehouseCode = "22005"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Address",
                            CurrentCode = "32000100049",
                            Email = "ornek@ornek.com",
                            IsDeleted = false,
                            MachineCode = "0044-005",
                            MachineName = "Miraç - Elişi",
                            MachineNo = 38,
                            Phone = "1123456789",
                            WarehouseCode = "22001"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Address",
                            CurrentCode = "32000100792",
                            Email = "ornek@ornek.com",
                            IsDeleted = false,
                            MachineCode = "0042-004",
                            MachineName = "Erdal Karakuş",
                            MachineNo = 39,
                            Phone = "1123456789",
                            WarehouseCode = "22003"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Address",
                            CurrentCode = "32000100878",
                            Email = "ornek@ornek.com",
                            IsDeleted = false,
                            MachineCode = "0042-006",
                            MachineName = "Taner Örme",
                            MachineNo = 40,
                            Phone = "1123456789",
                            WarehouseCode = "22016"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Address",
                            CurrentCode = "32000100874",
                            Email = "ornek@ornek.com",
                            IsDeleted = false,
                            MachineCode = "0042-007",
                            MachineName = "Onur Triko - Zaza",
                            MachineNo = 41,
                            Phone = "1123456789",
                            WarehouseCode = "22011"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Address",
                            CurrentCode = "32000100223",
                            Email = "ornek@ornek.com",
                            IsDeleted = false,
                            MachineCode = "0042-008",
                            MachineName = "Fatih Yavuz",
                            MachineNo = 42,
                            Phone = "1123456789",
                            WarehouseCode = "22004"
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.OutsourcesOutsourceUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OutsourceId")
                        .HasColumnType("int");

                    b.Property<int>("OutsourceUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OutsourceId");

                    b.HasIndex("OutsourceUserId");

                    b.ToTable("OutsourcesOutsourceUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OutsourceId = 1,
                            OutsourceUserId = 3
                        },
                        new
                        {
                            Id = 2,
                            OutsourceId = 2,
                            OutsourceUserId = 3
                        },
                        new
                        {
                            Id = 3,
                            OutsourceId = 3,
                            OutsourceUserId = 3
                        },
                        new
                        {
                            Id = 4,
                            OutsourceId = 1,
                            OutsourceUserId = 4
                        },
                        new
                        {
                            Id = 5,
                            OutsourceId = 2,
                            OutsourceUserId = 4
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.OutsourceUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OutsourceUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 3
                        },
                        new
                        {
                            Id = 4
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.OutsourceWorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AlkNormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AlkUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AlkWorkOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IntegrationStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<int>("OutsourceId")
                        .HasColumnType("int");

                    b.Property<int>("ProductWarehouseCode")
                        .HasColumnType("int");

                    b.Property<int>("RawMaterialsWarehouseCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SituationId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WorkOrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkOrderNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AlkWorkOrderId");

                    b.HasIndex("IntegrationStatusId");

                    b.HasIndex("OperationId");

                    b.HasIndex("OutsourceId");

                    b.HasIndex("SituationId");

                    b.ToTable("OutsourceWorkOrders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlkNormalizedUserName = "Orkun Demirci",
                            AlkUserName = "Or_De",
                            AlkWorkOrderId = 1,
                            Amount = 500m,
                            ColorCode = "ColorCode",
                            ColorName = "Color Name",
                            CreatedOn = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9129),
                            Deadline = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9127),
                            Description = "Açıklama",
                            IntegrationStatusId = 1,
                            IsDeleted = false,
                            OperationId = 1,
                            OutsourceId = 1,
                            ProductWarehouseCode = 1,
                            RawMaterialsWarehouseCode = 1,
                            RecordDate = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9104),
                            SituationId = 1,
                            WorkOrderDate = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9126),
                            WorkOrderNo = "000000000002988"
                        },
                        new
                        {
                            Id = 2,
                            AlkNormalizedUserName = "Orkun Demirci",
                            AlkUserName = "Or_De",
                            AlkWorkOrderId = 1,
                            Amount = 700m,
                            ColorCode = "ColorCode",
                            ColorName = "Color Name",
                            CreatedOn = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9196),
                            Deadline = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9194),
                            Description = "Açıklama",
                            IntegrationStatusId = 1,
                            IsDeleted = false,
                            OperationId = 2,
                            OutsourceId = 2,
                            ProductWarehouseCode = 1,
                            RawMaterialsWarehouseCode = 1,
                            RecordDate = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9192),
                            SituationId = 1,
                            WorkOrderDate = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9193),
                            WorkOrderNo = "000000000002989"
                        },
                        new
                        {
                            Id = 3,
                            AlkNormalizedUserName = "Orkun Demirci",
                            AlkUserName = "Or_De",
                            AlkWorkOrderId = 1,
                            Amount = 200m,
                            ColorCode = "ColorCode",
                            ColorName = "Color Name",
                            CreatedOn = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9202),
                            Deadline = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9200),
                            Description = "Açıklama",
                            IntegrationStatusId = 1,
                            IsDeleted = false,
                            OperationId = 3,
                            OutsourceId = 3,
                            ProductWarehouseCode = 1,
                            RawMaterialsWarehouseCode = 1,
                            RecordDate = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9199),
                            SituationId = 1,
                            WorkOrderDate = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9200),
                            WorkOrderNo = "000000000002990"
                        },
                        new
                        {
                            Id = 4,
                            AlkNormalizedUserName = "Orkun Demirci",
                            AlkUserName = "Or_De",
                            AlkWorkOrderId = 2,
                            Amount = 350m,
                            ColorCode = "ColorCode",
                            ColorName = "Color Name",
                            CreatedOn = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9206),
                            Deadline = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9206),
                            Description = "Açıklama",
                            IntegrationStatusId = 1,
                            IsDeleted = false,
                            OperationId = 4,
                            OutsourceId = 4,
                            ProductWarehouseCode = 1,
                            RawMaterialsWarehouseCode = 1,
                            RecordDate = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9204),
                            SituationId = 1,
                            WorkOrderDate = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9205),
                            WorkOrderNo = "000000000006124"
                        },
                        new
                        {
                            Id = 5,
                            AlkNormalizedUserName = "Orkun Demirci",
                            AlkUserName = "Or_De",
                            AlkWorkOrderId = 2,
                            Amount = 400m,
                            ColorCode = "ColorCode",
                            ColorName = "Color Name",
                            CreatedOn = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9212),
                            Deadline = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9211),
                            Description = "Açıklama",
                            IntegrationStatusId = 1,
                            IsDeleted = false,
                            OperationId = 5,
                            OutsourceId = 5,
                            ProductWarehouseCode = 1,
                            RawMaterialsWarehouseCode = 1,
                            RecordDate = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9209),
                            SituationId = 1,
                            WorkOrderDate = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9210),
                            WorkOrderNo = "000000000006125"
                        },
                        new
                        {
                            Id = 6,
                            AlkNormalizedUserName = "Orkun Demirci",
                            AlkUserName = "Or_De",
                            AlkWorkOrderId = 2,
                            Amount = 200m,
                            ColorCode = "ColorCode",
                            ColorName = "Color Name",
                            CreatedOn = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9217),
                            Deadline = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9216),
                            Description = "Açıklama",
                            IntegrationStatusId = 1,
                            IsDeleted = false,
                            OperationId = 1,
                            OutsourceId = 6,
                            ProductWarehouseCode = 1,
                            RawMaterialsWarehouseCode = 1,
                            RecordDate = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9214),
                            SituationId = 1,
                            WorkOrderDate = new DateTime(2023, 8, 17, 13, 59, 7, 739, DateTimeKind.Local).AddTicks(9215),
                            WorkOrderNo = "000000000006126"
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Receive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSealed")
                        .HasColumnType("bit");

                    b.Property<int>("OutsourceWorkOrderId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeUserId");

                    b.HasIndex("OutsourceWorkOrderId");

                    b.ToTable("Receives", (string)null);
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "c556ac6e-f79f-4c2f-83e3-170356050003",
                            IsDeleted = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "ce7b5952-cda0-4aed-a1eb-4553b8c1bdf5",
                            IsDeleted = false,
                            Name = "Employee User",
                            NormalizedName = "EMPLOYEE USER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "189b9bac-ef6f-4a57-94f5-ed7de4f1c79d",
                            IsDeleted = false,
                            Name = "Outsource User",
                            NormalizedName = "OUTSOURCE USER"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "2fc69ba6-c99c-4386-8a69-d551edf3e92d",
                            IsDeleted = false,
                            Name = "API User",
                            NormalizedName = "API USER"
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Situation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Situations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Üretici tarafında bekleyen işler.",
                            IsDeleted = false,
                            Name = "Beklemede"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Üretimi devam eden işler.",
                            IsDeleted = false,
                            Name = "Üretimde"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Üretimi tamamlanmış işler.",
                            IsDeleted = false,
                            Name = "Tamamlandı"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Üretimi ve teslimatı tamamlanmış işler.",
                            IsDeleted = false,
                            Name = "Biten"
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsChanged")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Tables", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsChanged = false
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Titles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Yazılım Uzamanı",
                            IsDeleted = false,
                            Name = "Yazılım Uzmanı"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Yazılım Uzman Yardımcısı",
                            IsDeleted = false,
                            Name = "Yazılım Uzman Yardımcı"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Ulaştırmacı",
                            IsDeleted = false,
                            Name = "Ulaştırmacı"
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Tracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSealed")
                        .HasColumnType("bit");

                    b.Property<int>("OutsourceWorkOrderId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Weight_Kg")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.HasKey("Id");

                    b.HasIndex("OutsourceWorkOrderId");

                    b.ToTable("Trackings", (string)null);
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirst")
                        .HasColumnType("bit");

                    b.Property<string>("KeyCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed925c5a-6c00-4921-b1e4-53f86a9edce0",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            IsActive = true,
                            IsDeleted = false,
                            IsFirst = false,
                            LastName = "Kullanıcı",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEIseugN+bbuIfd5EjY3VQiYGhISppkCCRW0Gww/iuRolZdTnDm49npX7q9GSEvz5fg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b677e80-72b2-4800-8a0a-f4243106bb7d",
                            TwoFactorEnabled = false,
                            UserName = "Admin Kullanıcı"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fdfb178d-8bf7-4491-b71f-5ac68e805c52",
                            Email = "employee1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Çalışan1",
                            IsActive = true,
                            IsDeleted = false,
                            IsFirst = false,
                            LastName = "Kullanıcı",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJYQMpyYDuGlsqswWW8pHCa2rcsKU/tssAI0bk54N1s117uqwHa5G9I10VmYSepSgw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "843ddcae-38fe-43ec-b546-4f5cb8b253ab",
                            TwoFactorEnabled = false,
                            UserName = "Çalışan1 Kullanıcı"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf2a5165-cf06-4c9f-a9ad-e44d9e412819",
                            Email = "fason1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Fason1",
                            IsActive = true,
                            IsDeleted = false,
                            IsFirst = false,
                            LastName = "Kullanıcı",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAED5ui4jpuiPfibGJX3fVwu8icZpi06eZSjWzK+PNVBqyfYeQY8M1KeTIi0YYcrMDew==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb96b2a7-3e02-4c99-bb16-a6eafe516395",
                            TwoFactorEnabled = false,
                            UserName = "Fason1 Kullanıcı"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "480dc309-cad8-437d-9c22-a02db3472d3d",
                            Email = "fason2@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Fason2",
                            IsActive = true,
                            IsDeleted = false,
                            IsFirst = false,
                            LastName = "Kullanıcı",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEFFQvGH0q+lK21wOM6LjM+hMmM6CUJag3HD/UwNHY49nT6OWBZUTiTFaBlkIjhjvmA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a31a01ae-f7a5-4b60-b146-fdcd6680a478",
                            TwoFactorEnabled = false,
                            UserName = "Fason2 Kullanıcı"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "72fe78bb-df3f-4802-a38e-bf6ea605f936",
                            Email = "employee2@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Çalışan2",
                            IsActive = true,
                            IsDeleted = false,
                            IsFirst = false,
                            LastName = "Kullanıcı",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEMmjeUYIOebanzg1qSoYogR3l4LP3dT3/pa4T51wQkBVAPPUCTI5iuoBz2xmiBHdYQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "61e9e108-8c9d-4fd8-bd96-d64a1651ed5e",
                            TwoFactorEnabled = false,
                            UserName = "Çalışan2 Kullanıcı"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "433e8840-610f-4775-8729-90aa78c2f1f5",
                            Email = "server@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Server",
                            IsActive = true,
                            IsDeleted = false,
                            IsFirst = false,
                            LastName = "Kullanıcı",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPjIOqZtqkogk13QcElLyOqMmd7KoEVlrgOCxLbrFoqaL1ywaIvnP0RSHWqI9d8KtA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47633dd6-8a16-4dba-a8e9-c78964b21609",
                            TwoFactorEnabled = false,
                            UserName = "Server Kullanıcı"
                        });
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.UsersRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            RoleId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            RoleId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            RoleId = 2,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            RoleId = 4,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.EmployeeUser", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.Department", "Department")
                        .WithMany("EmployeeUsers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.User", "User")
                        .WithOne("EmployeeUser")
                        .HasForeignKey("OutsourcerTracking.Labels.DataAccess.Entities.EmployeeUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.Title", "Title")
                        .WithMany("EmployeeUsers")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Title");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.OutsourcesOutsourceUsers", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.Outsource", "Outsource")
                        .WithMany("OutsourcesOutsourceUsers")
                        .HasForeignKey("OutsourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.OutsourceUser", "OutsourceUser")
                        .WithMany("Outsources")
                        .HasForeignKey("OutsourceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Outsource");

                    b.Navigation("OutsourceUser");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.OutsourceUser", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.User", "User")
                        .WithOne("OutsourceUser")
                        .HasForeignKey("OutsourcerTracking.Labels.DataAccess.Entities.OutsourceUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.OutsourceWorkOrder", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.AlkWorkOrder", "AlkWorkOrder")
                        .WithMany("OutsourceWorkOrders")
                        .HasForeignKey("AlkWorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.IntegrationStatus", "IntegrationStatus")
                        .WithMany("OutsourceWorkOrders")
                        .HasForeignKey("IntegrationStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.Operation", "Operation")
                        .WithMany("OutsourceWorkOrders")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.Outsource", "Outsource")
                        .WithMany("OutsourceWorkOrders")
                        .HasForeignKey("OutsourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.Situation", "Situation")
                        .WithMany("OutsourceWorkOrders")
                        .HasForeignKey("SituationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlkWorkOrder");

                    b.Navigation("IntegrationStatus");

                    b.Navigation("Operation");

                    b.Navigation("Outsource");

                    b.Navigation("Situation");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Receive", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.EmployeeUser", "EmployeeUser")
                        .WithMany("Receives")
                        .HasForeignKey("EmployeeUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.OutsourceWorkOrder", "OutsourceWorkOrder")
                        .WithMany("Receives")
                        .HasForeignKey("OutsourceWorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeUser");

                    b.Navigation("OutsourceWorkOrder");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Tracking", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.OutsourceWorkOrder", "OutsourceWorkOrder")
                        .WithMany("Trackings")
                        .HasForeignKey("OutsourceWorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OutsourceWorkOrder");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.UsersRoles", b =>
                {
                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutsourcerTracking.Labels.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.AlkWorkOrder", b =>
                {
                    b.Navigation("OutsourceWorkOrders");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Department", b =>
                {
                    b.Navigation("EmployeeUsers");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.EmployeeUser", b =>
                {
                    b.Navigation("Receives");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.IntegrationStatus", b =>
                {
                    b.Navigation("OutsourceWorkOrders");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Operation", b =>
                {
                    b.Navigation("OutsourceWorkOrders");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Outsource", b =>
                {
                    b.Navigation("OutsourceWorkOrders");

                    b.Navigation("OutsourcesOutsourceUsers");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.OutsourceUser", b =>
                {
                    b.Navigation("Outsources");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.OutsourceWorkOrder", b =>
                {
                    b.Navigation("Receives");

                    b.Navigation("Trackings");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Situation", b =>
                {
                    b.Navigation("OutsourceWorkOrders");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.Title", b =>
                {
                    b.Navigation("EmployeeUsers");
                });

            modelBuilder.Entity("OutsourcerTracking.Labels.DataAccess.Entities.User", b =>
                {
                    b.Navigation("EmployeeUser")
                        .IsRequired();

                    b.Navigation("OutsourceUser")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
